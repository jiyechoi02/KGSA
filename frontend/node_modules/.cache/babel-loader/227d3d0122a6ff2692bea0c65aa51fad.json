{"ast":null,"code":"var _jsxFileName = \"/Users/jiyechoi/Desktop/KGSA_web/kgsa/frontend/src/components/FileUploader.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport { CgCloseR } from 'react-icons/cg';\nimport styled from 'styled-components';\nimport { RiDeleteBin2Line, RiCheckboxMultipleBlankLine } from 'react-icons/ri';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledP = styled.p`\n    color : black;\n    font-size : 13pt;\n    &:hover{\n        color : red;\n    }\n`;\n_c = StyledP;\n\nconst FileUploader = (selectedFile, setSelectedFile) => {\n  _s();\n\n  const uploadedFiles = selectedFile.selectedFile;\n  const setUploadedFiles = selectedFile.setSelectedFile; // const {uploadedFiles, setUploadedFiles} = selectedFile\n\n  const [inputFileKey, setInputFileKey] = useState(\"inputFileKey\");\n  const [alert, setAlert] = useState(false); // alert \n\n  const handleFileChange = e => {\n    const files = e.target.files;\n\n    if (files.length > 10) {\n      console.log(\"Too many files\"); // replace it to Alert \n\n      setInputFileKey(new Date()); //set a random key to reset the file form \n    }\n\n    for (let i = 0; i < files.length; i++) {\n      setUploadedFiles(prev => [...prev, files[i]]);\n    }\n\n    setInputFileKey(new Date());\n  };\n\n  const handleLargeFilesAlertClose = () => {\n    setAlert(false);\n    setInputFileKey(new Date());\n  };\n\n  const renderUploadedFilesList = () => {\n    const list = uploadedFiles.map((item, i) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          fontSize: '10pt'\n        },\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            children: item.name ? item.name : item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(StyledP, {\n              onClick: () => handleDeleteUploadFiles(i),\n              children: /*#__PURE__*/_jsxDEV(RiDeleteBin2Line, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 79\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this);\n    });\n    return list;\n  };\n\n  const handleDeleteUploadFiles = index => {\n    setUploadedFiles(uploadedFiles.filter((item, i) => i !== index));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      className: \"editor-form-control\",\n      type: \"file\",\n      multiple: true,\n      onChange: handleFileChange,\n      accept: \"image/jpg, image/jpeg, image/png, image/gif, image/bmp\"\n    }, inputFileKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), uploadedFiles && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderUploadedFilesList()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FileUploader, \"2YCRn822PSjJnb/5ZG7j3qOmyjY=\");\n\n_c2 = FileUploader;\nexport default FileUploader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledP\");\n$RefreshReg$(_c2, \"FileUploader\");","map":{"version":3,"sources":["/Users/jiyechoi/Desktop/KGSA_web/kgsa/frontend/src/components/FileUploader.js"],"names":["useState","Form","Row","Col","CgCloseR","styled","RiDeleteBin2Line","RiCheckboxMultipleBlankLine","StyledP","p","FileUploader","selectedFile","setSelectedFile","uploadedFiles","setUploadedFiles","inputFileKey","setInputFileKey","alert","setAlert","handleFileChange","e","files","target","length","console","log","Date","i","prev","handleLargeFilesAlertClose","renderUploadedFilesList","list","map","item","fontSize","name","handleDeleteUploadFiles","index","filter"],"mappings":"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","sourcesContent":["import {useState} from 'react';\nimport {Form, Row,Col} from 'react-bootstrap';\nimport {CgCloseR} from 'react-icons/cg';\nimport styled from 'styled-components';\nimport {RiDeleteBin2Line,RiCheckboxMultipleBlankLine} from 'react-icons/ri';\n\nconst StyledP = styled.p`\n    color : black;\n    font-size : 13pt;\n    &:hover{\n        color : red;\n    }\n`\n\nconst FileUploader = (selectedFile,setSelectedFile)=>{\n    const uploadedFiles = selectedFile.selectedFile\n    const setUploadedFiles = selectedFile.setSelectedFile\n    // const {uploadedFiles, setUploadedFiles} = selectedFile\n    const [ inputFileKey, setInputFileKey] = useState(\"inputFileKey\");\n    const [alert, setAlert] = useState(false); // alert \n    \n    const handleFileChange = (e)=>{\n        const files = e.target.files\n        if(files.length> 10){\n            console.log(\"Too many files\") // replace it to Alert \n            setInputFileKey(new Date()) //set a random key to reset the file form \n        }\n\n        for(let i =0; i<files.length; i++){\n            setUploadedFiles(prev=> [...prev, files[i]])\n        }\n\n        setInputFileKey(new Date())\n    }\n\n    const handleLargeFilesAlertClose =()=>{\n        setAlert(false)\n        setInputFileKey(new Date())\n    }\n    \n    const renderUploadedFilesList = ()=>{\n        const list = uploadedFiles.map((item,i)=>{\n            return (\n                <li key={i} style={{fontSize:'10pt'}}>\n                    <Row>\n                        <Col xs={10}>\n                            {item.name? item.name : item}\n                        </Col>\n                        <Col xs={2}>\n                            <StyledP onClick={()=>handleDeleteUploadFiles(i)}><RiDeleteBin2Line/></StyledP>\n                        </Col>\n                    </Row>\n                </li>\n            )\n        })\n\n        return list\n    }\n\n    const handleDeleteUploadFiles = (index)=>{\n        setUploadedFiles(uploadedFiles.filter((item,i)=> i!== index));\n    }\n    \n    return(\n        <>\n            <Form.Control className=\"editor-form-control\"  type=\"file\" multiple onChange={handleFileChange} key={inputFileKey} accept=\"image/jpg, image/jpeg, image/png, image/gif, image/bmp\"/>  \n            {uploadedFiles && \n                <ul>\n                    {renderUploadedFilesList()}\n                </ul>\n            }\n        </>\n    )  \n}\n\nexport default FileUploader;\n"]},"metadata":{},"sourceType":"module"}